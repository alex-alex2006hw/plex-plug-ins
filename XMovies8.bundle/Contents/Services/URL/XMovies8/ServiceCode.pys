import os, urllib2
import sys, base64
from lxml import html

try:
	path = os.getcwd().split("?\\")[1].split('Plug-in Support')[0]+"Plug-ins/XMovies8.bundle/Contents/Code/Modules/XMovies8"
except:
	path = os.getcwd().split("Plug-in Support")[0]+"Plug-ins/XMovies8.bundle/Contents/Code/Modules/XMovies8"
if path not in sys.path:
	sys.path.append(path)

import cfscrape
scraper = cfscrape.create_scraper()

########################################################################################
def NormalizeURL(url):

	return url.split('&')[0]


########################################################################################
def MetadataObjectForURL(url):

	page = scraper.get(url)
	page_data = html.fromstring(page.text)
	title = page_data.xpath("//div[@class='dataplus']/h1/text()")[0]
	description = page_data.xpath("//div[@id='dato-2']/p/text()")[0]
	thumb = page_data.xpath("//div[@class='imgs']/img/@src")[0]

	return VideoClipObject(
		title = title,
		summary = description,
		thumb = thumb
	)

########################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [
				PartObject(key=Callback(PlayVideo, url=url, post_url=url))
			]
		)
	]

########################################################################################
def PlayVideo(url):

	view_url = ""
	page_data = scraper.get(url)
	page = html.fromstring(page_data.text)
	for each in page.xpath("//div[@class='player-content']"):
		try:
			view_url = view_url + "," + each.xpath("./iframe/@src")[0]
		except:
			view_url = view_url + "," + each.xpath("./video/source/@src")[0]

	view_url = view_url.lstrip(',')
	view_url = view_url.split(',')

	for vurl in view_url:
		if "vodlocker" in vurl:
			vodlocker = scraper.get(vurl).content
			try:
				video_url = Regex('file: "([^"]+)"').search(vodlocker).groups()[0]
				return Redirect(video_url)
			except:
				pass
		if "movshare" in vurl:
			try:
				movshare = HTML.ElementFromURL(vurl)
				video_url = movshare.xpath('//video/source/@src')[0]
				return Redirect(video_url)
			except:
				pass
		if "realvid" in vurl:
			try:
				realvid = scraper.get(vurl).content
				video_url = Regex('file: "([^"]+)"').search(realvid).groups()[0]
				return Redirect(video_url)
			except:
				pass
		if "google" in vurl:
			return Redirect(vurl)
