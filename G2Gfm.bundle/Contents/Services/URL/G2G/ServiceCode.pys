#!/usr/bin/env python

"""G2G Service Code"""

USER_AGENT = "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36"
RE_STATUS = Regex('"status","ok"')
RE_DURATION = Regex('"length_seconds","(\d+)"')
RE_TITLE = Regex("'title': '([^']+)'")
RE_FMT_MAP = Regex('"fmt_stream_map","([^"]+)"')
RE_COOKIE_VALUE = Regex('DRIVE_STREAM=([^;]+);')
FALLBACK = 'http://i.imgur.com/75YO83o.jpg'

####################################################################################################
def MetadataObjectForURL(url):

    d = get_data(url)
    thumb = FALLBACK if 'prx.proxy' in d['thumb'] else d['thumb']
    return VideoClipObject(
        title=d['title'],
        duration=total_duration(d['urls']),
        thumb=Resource.ContentsOfURLWithFallback([thumb, FALLBACK]),
        source_title='G2G'
        )

####################################################################################################
@deferred
def MediaObjectsForURL(url):

    d = get_data(url)
    #cookies = get_gd_cookies( GDNormalizeURL( sorted(d['urls'])[0][1] ) )
    return [
        MediaObject(
            video_resolution=res,
            bitrate=bit,
            container=Container.MP4,
            video_codec=VideoCodec.H264,
            audio_codec=AudioCodec.AAC,
            audio_channels=2,
            optimized_for_streaming=True,
            #optimized_for_streaming=False,
            parts=[
                PartObject(
                    key=BuildURLs(u).get(res, '720' if res == '1080' else '360'),
                    duration=int(PlayDuration(u)),
                    #http_headers={'User-Agent': USER_AGENT, 'Cookies': cookies},
                    ) for u in [GDNormalizeURL(item[1]) for item in sorted(d['urls'])]
                ],
            ) for res, bit in [('1080', 3000), ('720', 1500), ('360', 750)]
        ]

####################################################################################################
def get_gd_cookies(url):
    cookies = HTTP.CookiesForURL(url)
    Log(cookies)
    if not cookies:
        h = HTTP.Request(url, headers={'User-Agent': USER_AGENT}, cacheTime=300).headers
        Log(h)
        cookies = HTTP.CookiesForURL(url)
        Log(cookies)
    return cookies

####################################################################################################
def BuildURLs(url):

    page = get_page(url, False)
    url_dict = dict()
    for fmt in RE_FMT_MAP.search(page).group(1).decode('unicode_escape').split(','):
        if fmt.startswith('37|'):
            url_dict['1080'] = fmt.split('|')[1]
        elif fmt.startswith('22|'):
            url_dict['720'] = fmt.split('|')[1]
        elif fmt.startswith('18|'):
            url_dict['360'] = fmt.split('|')[1]

    if url_dict:
        Log.Debug(url_dict)
        return url_dict

    raise Ex.MediaNotAvailable

####################################################################################################
def get_data(url):
    return JSON.ObjectFromString(D(url.split('g2g://')[1]))

####################################################################################################
def GDNormalizeURL(url):
    return '%s/view' % (url.split('/preview')[0].split('/edit')[0].split('/view')[0])

####################################################################################################
def PlayDuration(url):
    return int(RE_DURATION.search(HTTP.Request(url, headers={'User-Agent': USER_AGENT}, cacheTime=300).content).group(1))*1000

####################################################################################################
def get_page(url, normalize=True):
    if normalize:
        url = GDNormalizeURL(url)
    try:
        page = HTTP.Request(url, headers={'User-Agent': USER_AGENT}, cacheTime=300).content
    except Ex.HTTPError, e:
        if e.code == 403:
            raise Ex.MediaNotAuthorized
        else:
            raise Ex.MediaNotAvailable
    except:
        raise Ex.MediaNotAvailable

    if not RE_STATUS.search(page) or not RE_DURATION.search(page):
        raise Ex.MediaNotAvailable
    return page

####################################################################################################
def total_duration(urls):
    duration = 0
    for url in urls:
        duration += int(RE_DURATION.search(get_page(url[1])).group(1))*1000
    return duration
