import ssl, urllib2

'''
VIDEO PAGE: 
http://www.hgtv.ca/shows/timber-kings/videos/under-the-gun-889567299613/

EPISODE DETAILS FROM VIDEO ID:
http://feed.theplatform.com/f/dtjsEC/EAlt6FfQ_kCX/889567299613

SMIL RESULT: JSON[content][0][url]
http://link.theplatform.com/s/dtjsEC/llc2KZ4_kdUm?manifest=f4m&feed=HGTV%20Main%20Feed&mbr=true

VIDEO URL:
https://hgtv-vh.akamaihd.net/i/371/1019/HGTV_HawaiiLife_E803.mp4,,.csmil/master.m3u8?hdnea=ip=XXX.XXX.XXX.XXX~st=1489967777~exp=1489968377~acl=/i/371/1019/HGTV_HawaiiLife_E803.mp4*~id=c5ad9d90-ba54-4b0d-bc1e-27d7fc90a2ea~hmac=d4fdd5da2323f9a1e519d398c32e9925cf88d302c29055bc0f5c2dd4590a7cbc
'''

FEED_URL = 'http://feed.theplatform.com/f/dtjsEC/EAlt6FfQ_kCX/{}'
RE_CLEANUP_M3U8 = Regex('#.+?RESOLUTION=(?!960x540).+?(\n)?.+?\.m3u8.*?\n')
RE_FIX_RELATIVE = Regex('("|^)(?!https?:\/\/)([^"\n]+\.m3u8[^"\n]*)', Regex.MULTILINE)

####################################################################################################
def NormalizeURL(url):

    return url.rstrip('/')

####################################################################################################
def MetadataObjectForURL(url):

    pid = GetPID(url)

    if not pid:
        raise Ex.MediaNotAvailable

    Log.Debug('* Episode PID: {}'.format(pid))

    json_obj = JSON.ObjectFromURL(FEED_URL.format(pid))

    title = json_obj['title']
    summary = json_obj['description'] if 'description' in json_obj else None
    thumb = json_obj['thumbnails'][0]['url'] if 'thumbnails' in json_obj else None
    show = json_obj['pl1$show'] if 'pl1$show' in json_obj else None
    season = int(json_obj['pl1$season']) if 'pl1$season' in json_obj and json_obj['pl1$season'] != "Special" else None
    index = int(json_obj['pl1$episode']) if 'pl1$episode' in json_obj else None
    originally_available_at = Datetime.FromTimestamp(json_obj['pubDate'] / 1000).date() if 'pubDate' in json_obj else None

    duration = None

    if 'content' in json_obj:

        if 'duration' in json_obj['content'][0]:
            duration = int(float(json_obj['content'][0]['duration']) * 1000)

    if show and season and index:

        return EpisodeObject(
            title = title,
            summary = summary,
            thumb = thumb,
            show = show,
            season = season,
            index = index,
            originally_available_at = originally_available_at,
            duration = duration
        )

    else:

        return VideoClipObject(
            title = title,
            summary = summary,
            thumb = thumb,
            originally_available_at = originally_available_at,
            duration = duration
        )
    
####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
            audio_channels = 2,
            video_resolution = 540,
            optimized_for_streaming = True,
            parts = [
                PartObject(
                    key = HTTPLiveStreamURL(Callback(PlayVideo, url=url))
                )
            ]
        )
    ]

####################################################################################################
def PlayVideo(url, **kwargs):

    pid = GetPID(url)

    if not pid:
        raise Ex.MediaNotAvailable

    Log.Debug('* PlayVideo Step 1 URL: {}'.format(FEED_URL.format(pid)))

    json_obj = JSON.ObjectFromURL(FEED_URL.format(pid))

    for item in json_obj['content']:

        if not 'f4m' in item['url']:
            continue

        Log.Debug('* PlayVideo Step 2 URL: {}'.format(item['url'].replace('f4m', 'm3u')))

        try:

            data = HTTP.Request(item['url'].replace('f4m', 'm3u'), follow_redirects=False).content
            xml = XML.ElementFromString(data)

            try:
                video_url = xml.xpath('//a:video/@src', namespaces={'a': 'http://www.w3.org/2005/SMIL21/Language'})[0]
                return GetData(video_url)
            except:
                if 'GeoLocationBlocked' in data:
                    raise Ex.MediaGeoblocked
                else:
                    raise Ex.MediaNotAvailable

        except Ex.RedirectError, e:

            if 'Location' in e.headers:

                base_url = e.headers['Location'].rsplit('/', 1)[0]

                playlist = GetData(e.headers['Location'])
                playlist = RE_CLEANUP_M3U8.sub('', playlist)

                playlist = RE_FIX_RELATIVE.sub('%s%s/%s' % ('\\1', base_url, '\\2'), playlist)

                return playlist
            else:
                raise Ex.MediaNotAvailable
        except:
            raise Ex.MediaNotAvailable

    raise Ex.MediaNotAvailable

####################################################################################################
def GetPID(url):

    return url.rsplit('-', 1)[1]

####################################################################################################
def GetData(url):

    req = urllib2.Request(url, headers={'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36'})
    ssl_context = ssl.SSLContext(ssl.PROTOCOL_TLSv1)
    data = urllib2.urlopen(req, context=ssl_context).read()

    return data
