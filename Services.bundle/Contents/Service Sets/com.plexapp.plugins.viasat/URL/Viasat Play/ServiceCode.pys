API_BASE_URL = String.Decode('aHR0cDovL3BsYXlhcGkubXRneC50di92My8=')
VIDEO_STREAM_URL = API_BASE_URL + 'videos/stream/%s'
VIDEO_DETAILS_URL = API_BASE_URL + 'videos/%s'

RE_ID_URL = Regex('\d+')
RE_ID_IMAGE = Regex('\/(\d+)\/')

####################################################################################################
def MetadataObjectForURL(url): 
    # Determine id of episode
    id = FindVideoID(url)
        
    try: 
        video = JSON.ObjectFromURL(VIDEO_DETAILS_URL % id)
    except:
        raise Ex.MediaNotAvailable
    
    try:
        title = unicode(video['title'])
    except:
        raise Ex.MediaNotAvailable
        
    try:
        summary = unicode(video['summary'])
    except:
        summary = None
        
    try:
        show = unicode(video['format_title'])
    except:
        show = None
        
    try:
        art = video['_embedded']['season']['_links']['image']['href'].replace("{size}", "994x560")
    except:
        art = None
        
    try:
        thumb = video['_links']['image']['href'].replace("{size}", "497x280")
    except:
        thumb = None
        
    try:
        originally_available_at = Datetime.ParseDate(video['publish_at'].split("T")[0]).date()
    except:
        originally_available_at = None
        
    try:
        duration = int(video['duration']) * 1000
    except:
        duration = None
        
    try:
        season = int(video['format_position']['season'])
    except:
        season = None
        
    try:
        index = int(video['format_position']['episode'])
    except:
        index = None  
    
    return EpisodeObject(
        title = title,
        summary = summary,
        show = show,
        art = art,
        thumb = thumb,
        originally_available_at = originally_available_at,
        duration = duration,
        season = season,
        index = index
    )

####################################################################################################
def MediaObjectsForURL(url):
    return [
        MediaObject(
            video_resolution        = 576,
            audio_channels          = 2,
            optimized_for_streaming = True,
            parts                   = [
                PartObject(
                    key = HTTPLiveStreamURL(Callback(PlayVideo, url = url))
                )
            ]
        )
    ]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):
    # Determine id of episode
    id = FindVideoID(url)

    try: 
        data = JSON.ObjectFromURL(VIDEO_STREAM_URL % id)
    except:
        raise Ex.MediaGeoblocked
            
    return IndirectResponse(
        VideoClipObject,
        key = HTTPLiveStreamURL(data['streams']['hls'])
    )

####################################################################################################
def FindVideoID(url):
    # Try to find video id via URL
    try:
        if '?id=' in url:
            split = url.split('=')
        else:
            split = url.split('/')
        
        id  = RE_ID_URL.findall(split[-1])[0]
        return id
    except:
        pass
        
    # Try to find video via html
    try:
        element = HTML.ElementFromURL(url)
        image_url = element.xpath("//meta[@property='og:image']/@content")[0]
        id = RE_ID_IMG.search(image_url).groups()[0]
    except:
        raise Ex.MediaNotAvailable

    return id
