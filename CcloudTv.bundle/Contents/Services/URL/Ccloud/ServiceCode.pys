#!/usr/bin/env python

USER_AGENT = 'Mozilla5.0'

####################################################################################################
def NormalizeURL(url):

	return url

####################################################################################################
def MetadataObjectForURL(url):

	data = get_data(url)
	
	furl = data['url']
	title = data['title']
	summary = data['summary']
	thumb = data['thumb']
	try:
		content_rating = data['content_rating']
		if content_rating == "None":
			content_rating = None
	except:
		content_rating = None
	
	try:
		year = data['year']
		year = int(year)
	except:
		year = None
		
	try:
		studio = data['studio']
		if studio == "None":
			studio = None
	except:
		studio = None
	
	try:
		genres_a = []
		genres = data['genres']
		for g in genres.split(','):
			if g != '':
				genres_a.append(g.strip())
	except:
		genres_a = []
		
	try:
		writers_a = []
		writers = data['writers']
		for w in writers.split(','):
			if w != '':
				writers_a.append({'name': w.strip()})
	except:
		writers_a = []
	
	try:
		directors_a = []
		directors = data['directors']
		for d in directors.split(','):
			if d != '':
				directors_a.append({'name': d.strip()})
	except:
		directors_a = []
		
	try:
		roles_a = []
		roles = data['roles']
		for r in roles.split(','):
			if r != '':
				roles_a.append({'name': r.strip()})
	except:
		roles_a = []
	
	try:
		rating = float(data['rating'])
	except:
		rating = None
		
	try:
		duration = int(data['duration'])
	except:
		duration = 86400000
		
	return MovieObject(
		title = title,
		url = furl,
		summary = summary,
		rating = rating,
		duration = duration,
		content_rating = content_rating,
		studio = studio,
		year = year,
		genres = genres_a,
		writers = writers_a,
		directors = directors_a,
		roles = roles_a,
		thumb = Resource.ContentsOfURLWithFallback(url = thumb, fallback='icon-cover.png')
	)

####################################################################################################
def MediaObjectsForURL(url):
	
	data = get_data(url)
	furl = data['url']
	
	if '.flv' in furl:
		return [
			MediaObject(
				container = Container.FLV,
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [PartObject(key=Callback(PlayVideo, url=furl))]
			)
		]
	elif '.m3u8' in furl:
		return [
			MediaObject(
				protocol = 'hls',
                container = 'mpegts',
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [PartObject(key=Callback(PlayVideo, url=furl, ext='m3u8'))]
			)
		]
	else:
		return [
			MediaObject(
				container = Container.MP4,
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [PartObject(key=Callback(PlayVideo, url=furl))]
			)
		]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):
	http_headers = {'User-Agent': USER_AGENT}
	if '.m3u8' in url:
		return IndirectResponse(VideoClipObject, key=HTTPLiveStreamURL(url), http_headers=http_headers)
	else:
		return IndirectResponse(VideoClipObject, key=url, http_headers=http_headers)

####################################################################################################
def get_data(url):
	return JSON.ObjectFromString(D(url.split('ccloudtv://')[1]))
	