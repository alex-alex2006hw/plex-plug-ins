#!/usr/bin/env python
# -*- coding: utf-8 -*-

#########################################################################################################
#
# OpenLoad scrapper
#
# Coder Alpha
# https://github.com/coder-alpha
#
# Adapted from youtube-dl
# https://github.com/rg3/youtube-dl
# https://github.com/rg3/youtube-dl/issues/10408
# and modified for use with Plex Media Server
#
#########################################################################################################

import re, base64

API_URL = 'https://api.openload.co/1'
PAIR_INFO_URL = API_URL + '/streaming/info'
GET_VIDEO_URL = API_URL + '/streaming/get?file=%s'
VALID_URL = r'https?://(?:openload\.(?:co|io)|oload\.tv)/(?:f|embed)/(?P<id>[a-zA-Z0-9-_]+)'

def resolve(url, openloadApiKey):
	#Log(url)
	video_id = match_id(url)
	video_url, cont, cu = link_from_api(video_id, openloadApiKey)
	if video_url == None and cont == True:
		video_url = pairing_method(video_id)
	return video_url
		
def pairing_method(video_id):
	try:
		get_info = JSON.ObjectFromURL(GET_VIDEO_URL % video_id)
		print "get_info --- %s" % get_info
		
		status = get_info.get('status')
		print "status --- %s" % status
		
		if status == 200:
			result = get_info.get('result', {})
			Log(result.get('url'))
			return result.get('url')
	except Exception as e:
		print e
	
	return None
	
# Twoure's API method
def link_from_api(fid, openloadApiKey):

	try:
		if 'http' in fid:
			fid = match_id(fid)

		cont = True
		catcha_url = None
		
		lk = openloadApiKey
		if lk == None or lk == '' or len(lk) == 0 or ':' not in lk:
			lk = base64.b64decode(base64.b64decode('WW1ReU9USmxNalkzTjJZd016RTFOenBmWjNnMU5GTkROUT09'))
		
		lk = lk.split(':')
		l = lk[0]
		k = lk[1]
		burl = 'https://api.openload.co/1/file/'

		try:
			url = None
			url = burl + 'dlticket?file=' + fid + '&login=' + l + '&key=' + k
			data = JSON.ObjectFromURL(url)
		except Exception as e:
			print e
			Log.Error(u"* <openload.link_from_api> - error: cannot handle first api link %s >>>" % url)
			return None, cont, catcha_url

		if data["status"] == 200:
			t = data["result"]["ticket"]
			if 'captcha_url' in data["result"].keys():
				catcha_url = data["result"]["captcha_url"]
			try:
				url = None
				url = burl + 'dl?file=' + fid + '&ticket=' + t
				data = JSON.ObjectFromURL(url)
				#print data
				if data["status"] == 200:
					return data['result']['url'].replace("https", "http"), cont, catcha_url
				else:
					Log.Error(u"* <openload.link_from_api> - error: cannot handle 2nd api link %s >>>" % data['msg'])
			except:
				Log.Error(u"* <openload.link_from_api> - error: cannot handle 2nd api link %s >>>" % url)
		Log.Error("* <openload.link_from_api> - error: failed to retrieve video stream")
	except Exception as e:
		Log.Error("* <openload.link_from_api> - error: %s" % e)
	return None, cont, catcha_url
		
#############################################################################################

def match_id(url):
	VALID_URL_RE = re.compile(VALID_URL)
	m = VALID_URL_RE.match(url)
	assert m
	return m.group('id')
