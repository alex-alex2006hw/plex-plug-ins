import common
ss = common.init_ss()

def NormalizeURL(url):
    return url

def MetadataObjectForURL(url):
    params   = common.params(url)
    endpoint = params.get('endpoint')
    wizard   = ss.Wizard(endpoint)

    return common.metadata_from(wizard.payload['resource'])

def MediaObjectsForURL(url):
    params = common.params(url)

    if '/wizard' == params.path:
        obj = mo(PlayWizard, endpoint = params.get('endpoint'),
                avoid_flv = params.get('avoid_flv'),
                start_at = params.get('start_at'))

    return [ obj ]

@indirect
def PlayWizard(endpoint, avoid_flv = 0, start_at = 0):
    wizard = ss.Wizard(endpoint,
            avoid_flv = bool(int(avoid_flv)),
            start_at = int(start_at))

    def first_working(consumer): consumer.asset_url
    wizard.sources(first_working)

    if wizard.consumer:
        return IndirectResponse(VideoClipObject, key = wizard.consumer.asset_url)
    else:
        raise  Ex.MediaNotAvailable

def mo(cb, **kwargs):
    return MediaObject(
        parts = [ PartObject( key = Callback(cb, **kwargs) ) ],
    )
